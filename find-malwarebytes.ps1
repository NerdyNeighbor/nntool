# Find where Malwarebytes is actually installed

Write-Host "=== MALWAREBYTES LOCATION DETECTIVE ===" -ForegroundColor Cyan
Write-Host ""

# Check registry install location
$mbamReg = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" -ErrorAction SilentlyContinue | 
    Where-Object { $_.DisplayName -like "*Malwarebytes*" }

if ($mbamReg) {
    Write-Host "Registry Info:" -ForegroundColor Yellow
    Write-Host "  Display Name: $($mbamReg.DisplayName)" -ForegroundColor White
    Write-Host "  Version: $($mbamReg.DisplayVersion)" -ForegroundColor White
    Write-Host "  Install Location: $($mbamReg.InstallLocation)" -ForegroundColor White
    Write-Host "  Uninstall String: $($mbamReg.UninstallString)" -ForegroundColor White
    Write-Host ""
}

# Search for Malwarebytes files in common locations
Write-Host "Searching for Malwarebytes files..." -ForegroundColor Yellow

$searchPaths = @(
    "${env:ProgramFiles}\Malwarebytes",
    "${env:ProgramFiles(x86)}\Malwarebytes", 
    "${env:ProgramData}\Malwarebytes",
    "${env:LocalAppData}\Malwarebytes",
    "${env:ProgramFiles}\Malwarebytes\Anti-Malware",
    "${env:ProgramFiles(x86)}\Malwarebytes\Anti-Malware",
    "${env:ProgramFiles}\Malwarebytes Premium",
    "${env:ProgramFiles(x86)}\Malwarebytes Premium"
)

foreach ($path in $searchPaths) {
    if (Test-Path $path) {
        Write-Host "FOUND: $path" -ForegroundColor Green
        
        # List contents
        $items = Get-ChildItem $path -ErrorAction SilentlyContinue
        foreach ($item in $items) {
            if ($item.Name -like "*mbam*" -or $item.Name -like "*malware*") {
                Write-Host "  -> $($item.Name)" -ForegroundColor Cyan
                
                if ($item.Name -like "*.exe") {
                    $version = try { $item.VersionInfo.FileVersion } catch { "Unknown" }
                    Write-Host "     Version: $version" -ForegroundColor Gray
                }
            }
        }
        Write-Host ""
    } else {
        Write-Host "Not found: $path" -ForegroundColor DarkGray
    }
}

# Search entire Program Files for any Malwarebytes executables
Write-Host "Deep search for mbam*.exe files..." -ForegroundColor Yellow

$found = @()
try {
    $found += Get-ChildItem "${env:ProgramFiles}\*" -Recurse -Include "mbam*.exe", "*malware*.exe" -ErrorAction SilentlyContinue
    $found += Get-ChildItem "${env:ProgramFiles(x86)}\*" -Recurse -Include "mbam*.exe", "*malware*.exe" -ErrorAction SilentlyContinue
} catch {
    Write-Host "Search error: $_" -ForegroundColor Red
}

if ($found.Count -gt 0) {
    Write-Host "Found executables:" -ForegroundColor Green
    foreach ($exe in $found) {
        Write-Host "  $($exe.FullName)" -ForegroundColor White
        $version = try { $exe.VersionInfo.FileVersion } catch { "Unknown" }
        Write-Host "    Version: $version" -ForegroundColor Gray
        Write-Host "    Size: $($exe.Length) bytes" -ForegroundColor Gray
    }
} else {
    Write-Host "No Malwarebytes executables found!" -ForegroundColor Red
}

Write-Host ""

# Check services
Write-Host "Malwarebytes Services:" -ForegroundColor Yellow
$services = Get-Service "*malware*", "*mbam*" -ErrorAction SilentlyContinue

if ($services) {
    foreach ($svc in $services) {
        Write-Host "  $($svc.Name): $($svc.Status)" -ForegroundColor White
        
        # Get service executable path
        try {
            $svcInfo = Get-WmiObject Win32_Service -Filter "Name='$($svc.Name)'" -ErrorAction SilentlyContinue
            if ($svcInfo.PathName) {
                Write-Host "    Path: $($svcInfo.PathName)" -ForegroundColor Gray
            }
        } catch {}
    }
} else {
    Write-Host "  No Malwarebytes services found" -ForegroundColor Red
}

Write-Host ""
Write-Host "Press any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")