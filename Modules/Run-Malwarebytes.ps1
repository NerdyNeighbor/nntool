# Malwarebytes Automation Module
# Downloads, installs, runs scan with rootkit detection, then removes

param(
    [string]$LogFunction = "Write-Host"
)

function Write-NNLog {
    param([string]$Message, [string]$Level = "INFO")
    
    if ($LogFunction -eq "Write-Log" -and (Get-Command Write-Log -ErrorAction SilentlyContinue)) {
        & Write-Log $Message $Level
    } else {
        $color = switch ($Level) {
            "ERROR" { "Red" }
            "WARNING" { "Yellow" }
            "SUCCESS" { "Green" }
            default { "White" }
        }
        Write-Host "[$Level] $Message" -ForegroundColor $color
    }
}

function Install-Malwarebytes {
    Write-NNLog "Downloading Malwarebytes..." "INFO"
    
    $mbamUrl = "https://www.malwarebytes.com/api/downloads/mb-windows"
    $mbamInstaller = Join-Path $env:TEMP "mbam-setup.exe"
    
    try {
        # Download installer
        Invoke-WebRequest -Uri $mbamUrl -OutFile $mbamInstaller -UseBasicParsing
        
        if (Test-Path $mbamInstaller) {
            Write-NNLog "Installing Malwarebytes silently..." "INFO"
            
            # Silent install with no desktop shortcut, no startup entry
            $arguments = @(
                "/VERYSILENT",
                "/SUPPRESSMSGBOXES",
                "/NORESTART",
                "/SP-",
                "/NOICONS"
            )
            
            $process = Start-Process -FilePath $mbamInstaller -ArgumentList $arguments -Wait -PassThru -NoNewWindow
            
            if ($process.ExitCode -eq 0) {
                Write-NNLog "Malwarebytes installed successfully" "SUCCESS"
                
                # Give it a moment to fully install
                Start-Sleep -Seconds 5
                
                # Disable trial popup and notifications
                $mbamRegPath = "HKLM:\SOFTWARE\Malwarebytes\MBAMService"
                if (Test-Path $mbamRegPath) {
                    Set-ItemProperty -Path $mbamRegPath -Name "TrialExpired" -Value 1 -ErrorAction SilentlyContinue
                    Set-ItemProperty -Path $mbamRegPath -Name "ShowNotifications" -Value 0 -ErrorAction SilentlyContinue
                }
                
                return $true
            } else {
                Write-NNLog "Installation failed with exit code: $($process.ExitCode)" "ERROR"
                return $false
            }
        }
    } catch {
        Write-NNLog "Failed to download/install Malwarebytes: $_" "ERROR"
        return $false
    } finally {
        if (Test-Path $mbamInstaller) {
            Remove-Item $mbamInstaller -Force -ErrorAction SilentlyContinue
        }
    }
    
    return $false
}

function Run-MalwarebytesScan {
    Write-NNLog "Starting Malwarebytes scan with rootkit detection..." "INFO"
    
    # Find Malwarebytes installation
    $mbamPaths = @(
        "${env:ProgramFiles}\Malwarebytes\Anti-Malware\mbam.exe",
        "${env:ProgramFiles(x86)}\Malwarebytes\Anti-Malware\mbam.exe",
        "${env:ProgramFiles}\Malwarebytes\mbam.exe"
    )
    
    $mbamCLI = $null
    foreach ($path in $mbamPaths) {
        if (Test-Path $path) {
            $mbamCLI = $path
            break
        }
    }
    
    # Try the command line scanner
    $mbamCmdPaths = @(
        "${env:ProgramFiles}\Malwarebytes\Anti-Malware\mbamcmd.exe",
        "${env:ProgramFiles(x86)}\Malwarebytes\Anti-Malware\mbamcmd.exe"
    )
    
    $mbamCmd = $null
    foreach ($path in $mbamCmdPaths) {
        if (Test-Path $path) {
            $mbamCmd = $path
            break
        }
    }
    
    if ($mbamCmd) {
        Write-NNLog "Using command-line scanner..." "INFO"
        
        # Configure scan settings via registry
        $scanSettings = @{
            "HKLM:\SOFTWARE\Malwarebytes\MBAMService\ScanSettings" = @{
                "ScanRootkits" = 1
                "ScanMemory" = 1
                "ScanStartup" = 1
                "ScanRegistry" = 1
                "ScanFileSystem" = 1
                "ScanArchives" = 1
                "RemovePUP" = 1
                "RemovePUM" = 1
            }
        }
        
        foreach ($regPath in $scanSettings.Keys) {
            if (-not (Test-Path $regPath)) {
                New-Item -Path $regPath -Force | Out-Null
            }
            foreach ($setting in $scanSettings[$regPath].Keys) {
                Set-ItemProperty -Path $regPath -Name $setting -Value $scanSettings[$regPath][$setting] -ErrorAction SilentlyContinue
            }
        }
        
        # Start the scan
        Write-NNLog "Scanning system (this may take 15-45 minutes)..." "INFO"
        
        try {
            # Run threat scan with rootkit scanning enabled
            $scanArgs = @(
                "/scan",
                "-rootkits",
                "-memory",
                "-startup",
                "-registry",
                "-filesystem",
                "-archives",
                "-remove",
                "-log", (Join-Path $env:TEMP "mbam_scan.txt")
            )
            
            $scanProcess = Start-Process -FilePath $mbamCmd -ArgumentList $scanArgs -Wait -PassThru -NoNewWindow
            
            # Read the log for results
            $logPath = Join-Path $env:TEMP "mbam_scan.txt"
            if (Test-Path $logPath) {
                $logContent = Get-Content $logPath -Tail 50
                $threats = $logContent | Select-String -Pattern "Threats detected:|Objects infected:" | ForEach-Object { $_.Line }
                
                if ($threats) {
                    Write-NNLog "Scan complete. Results: $threats" "WARNING"
                } else {
                    Write-NNLog "Scan complete. No threats detected." "SUCCESS"
                }
                
                # Parse for threat details
                $threatDetails = $logContent | Select-String -Pattern "Malware\.|Trojan\.|PUP\.|PUM\.|Rootkit\." | ForEach-Object { $_.Line }
                foreach ($threat in $threatDetails) {
                    Write-NNLog "Found: $threat" "WARNING"
                }
            }
            
            return $true
            
        } catch {
            Write-NNLog "Error during scan: $_" "ERROR"
            return $false
        }
        
    } elseif ($mbamCLI) {
        # Use GUI version - start a threat scan
        Write-NNLog "Starting Malwarebytes threat scan..." "INFO"
        
        try {
            # Start Malwarebytes with scan argument if supported
            $mbamArgs = @()
            
            # Check if we can start a scan directly
            $process = Start-Process -FilePath $mbamCLI -ArgumentList $mbamArgs -PassThru
            
            if ($process) {
                Write-NNLog "Malwarebytes started (PID: $($process.Id))" "INFO"
                Write-NNLog "Scan will run in GUI - this may take 15-30 minutes" "INFO"
                Write-NNLog "The scan will run automatically, no user intervention required" "INFO"
                
                # Give it time to start the scan
                Start-Sleep -Seconds 15
                
                # Check if it's still running (scanning)
                if (-not $process.HasExited) {
                    Write-NNLog "Malwarebytes is running - scan in progress" "SUCCESS"
                    
                    # Monitor the process for up to 45 minutes
                    $maxWaitMinutes = 45
                    $checkIntervalSeconds = 60
                    $totalChecks = $maxWaitMinutes * 60 / $checkIntervalSeconds
                    
                    for ($i = 1; $i -le $totalChecks; $i++) {
                        Start-Sleep -Seconds $checkIntervalSeconds
                        
                        # Check if process is still running
                        $mbamProcess = Get-Process -Id $process.Id -ErrorAction SilentlyContinue
                        if (-not $mbamProcess) {
                            Write-NNLog "Malwarebytes scan completed (process ended)" "SUCCESS"
                            break
                        }
                        
                        $elapsed = $i * $checkIntervalSeconds / 60
                        Write-NNLog "Scan still running... ($([math]::Round($elapsed, 1)) minutes elapsed)" "INFO"
                        
                        # Check CPU usage to see if it's actually scanning
                        try {
                            $cpuUsage = $mbamProcess.CPU
                            if ($cpuUsage -gt 0) {
                                Write-NNLog "Scan is active (CPU usage detected)" "INFO"
                            }
                        } catch {
                            # CPU info not available, continue monitoring
                        }
                    }
                    
                    # If still running after max time, inform user
                    $stillRunning = Get-Process -Id $process.Id -ErrorAction SilentlyContinue
                    if ($stillRunning) {
                        Write-NNLog "Scan is taking longer than expected (45+ minutes)" "WARNING"
                        Write-NNLog "You may need to check Malwarebytes GUI manually" "WARNING"
                    }
                } else {
                    Write-NNLog "Malwarebytes exited quickly - check if scan completed" "WARNING"
                }
                
                return $true
            } else {
                Write-NNLog "Failed to start Malwarebytes process" "ERROR"
                return $false
            }
            
        } catch {
            Write-NNLog "Error starting Malwarebytes: $_" "ERROR"
            return $false
        }
    } else {
        Write-NNLog "Malwarebytes executable not found" "ERROR"
        return $false
    }
}

function Uninstall-Malwarebytes {
    Write-NNLog "Uninstalling Malwarebytes..." "INFO"
    
    # Stop Malwarebytes processes
    $mbamProcesses = @("mbam", "mbamservice", "mbamtray", "mbamgui")
    foreach ($proc in $mbamProcesses) {
        Get-Process -Name $proc -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
    }
    
    # Stop services
    Stop-Service -Name "MBAMService" -Force -ErrorAction SilentlyContinue
    Stop-Service -Name "MBAMProtection" -Force -ErrorAction SilentlyContinue
    
    # Find uninstaller
    $uninstallKeys = @(
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
    )
    
    $mbamUninstaller = $null
    foreach ($key in $uninstallKeys) {
        $programs = Get-ItemProperty $key -ErrorAction SilentlyContinue
        foreach ($program in $programs) {
            if ($program.DisplayName -like "*Malwarebytes*") {
                $mbamUninstaller = $program.UninstallString
                break
            }
        }
        if ($mbamUninstaller) { break }
    }
    
    if ($mbamUninstaller) {
        Write-NNLog "Running uninstaller..." "INFO"
        
        if ($mbamUninstaller -like "MsiExec.exe*") {
            # MSI uninstall
            $guid = [regex]::Match($mbamUninstaller, '\{[A-F0-9\-]+\}').Value
            if ($guid) {
                Start-Process -FilePath "msiexec.exe" -ArgumentList "/x", $guid, "/qn", "/norestart" -Wait -NoNewWindow
                Write-NNLog "Malwarebytes uninstalled successfully" "SUCCESS"
            }
        } else {
            # EXE uninstaller
            $uninstallPath = $mbamUninstaller -replace '"', ''
            if (Test-Path $uninstallPath) {
                Start-Process -FilePath $uninstallPath -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait -NoNewWindow
                Write-NNLog "Malwarebytes uninstalled successfully" "SUCCESS"
            }
        }
    } else {
        Write-NNLog "Could not find Malwarebytes uninstaller" "WARNING"
    }
    
    # Clean up leftover folders
    $mbamFolders = @(
        "${env:ProgramFiles}\Malwarebytes",
        "${env:ProgramFiles(x86)}\Malwarebytes",
        "${env:ProgramData}\Malwarebytes",
        "${env:LocalAppData}\Malwarebytes"
    )
    
    foreach ($folder in $mbamFolders) {
        if (Test-Path $folder) {
            Remove-Item $folder -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
}

# Main execution
Write-NNLog "Starting Malwarebytes automated scan process..." "INFO"

# Check if Malwarebytes is already installed
$mbamInstalled = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" -ErrorAction SilentlyContinue | 
    Where-Object { $_.DisplayName -like "*Malwarebytes*" }

if (-not $mbamInstalled) {
    Write-NNLog "Malwarebytes not found, installing..." "INFO"
    $installed = Install-Malwarebytes
    
    if (-not $installed) {
        Write-NNLog "Failed to install Malwarebytes" "ERROR"
        return
    }
} else {
    Write-NNLog "Malwarebytes is already installed: $($mbamInstalled.DisplayName)" "INFO"
    Write-NNLog "Version: $($mbamInstalled.DisplayVersion)" "INFO"
}

# Run the scan
$scanSuccess = Run-MalwarebytesScan

if ($scanSuccess) {
    Write-NNLog "Scan completed successfully" "SUCCESS"
} else {
    Write-NNLog "Scan may have encountered issues" "WARNING"
}

# Wait a moment for any quarantine operations to complete
Start-Sleep -Seconds 5

# Uninstall Malwarebytes
Uninstall-Malwarebytes

Write-NNLog "Malwarebytes scan and removal process complete" "SUCCESS"