# Enhanced Malwarebytes Module with Debug Information
# This version provides detailed logging for troubleshooting

param(
    [string]$LogFunction = "Write-Host"
)

function Write-NNLog {
    param([string]$Message, [string]$Level = "INFO")
    
    if ($LogFunction -eq "Write-Log" -and (Get-Command Write-Log -ErrorAction SilentlyContinue)) {
        & Write-Log $Message $Level
    } else {
        $color = switch ($Level) {
            "ERROR" { "Red" }
            "WARNING" { "Yellow" }
            "SUCCESS" { "Green" }
            default { "White" }
        }
        Write-Host "[$Level] $Message" -ForegroundColor $color
    }
}

Write-NNLog "=== MALWAREBYTES DEBUG MODULE STARTED ===" "INFO"
Write-NNLog "Current user: $env:USERNAME" "INFO"
Write-NNLog "Is admin: $([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))" "INFO"

# Check if Malwarebytes is already installed
Write-NNLog "Checking for existing Malwarebytes installation..." "INFO"

$mbamInstalled = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" -ErrorAction SilentlyContinue | 
    Where-Object { $_.DisplayName -like "*Malwarebytes*" }

if ($mbamInstalled) {
    Write-NNLog "Found existing installation: $($mbamInstalled.DisplayName)" "INFO"
    Write-NNLog "Version: $($mbamInstalled.DisplayVersion)" "INFO"
    Write-NNLog "Install location: $($mbamInstalled.InstallLocation)" "INFO"
} else {
    Write-NNLog "No existing Malwarebytes installation found" "INFO"
    
    # Try to download and install
    Write-NNLog "Attempting to download Malwarebytes..." "INFO"
    
    # Use direct download URL (more reliable than redirect)
    $mbamUrl = "https://downloads.malwarebytes.com/file/mb4_offline"
    $mbamInstaller = Join-Path $env:TEMP "mbam-setup.exe"
    
    try {
        Write-NNLog "Downloading from: $mbamUrl" "INFO"
        Write-NNLog "Saving to: $mbamInstaller" "INFO"
        
        $webClient = New-Object System.Net.WebClient
        $webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
        $webClient.DownloadFile($mbamUrl, $mbamInstaller)
        
        if (Test-Path $mbamInstaller) {
            $fileSize = (Get-Item $mbamInstaller).Length
            Write-NNLog "Download completed. File size: $([math]::Round($fileSize/1MB, 2)) MB" "SUCCESS"
            
            if ($fileSize -lt 1MB) {
                Write-NNLog "WARNING: Downloaded file seems too small, might be an error page" "WARNING"
                $content = Get-Content $mbamInstaller -Raw -ErrorAction SilentlyContinue
                if ($content -like "*html*" -or $content -like "*<*") {
                    Write-NNLog "Downloaded file contains HTML - this is likely an error page" "ERROR"
                    Remove-Item $mbamInstaller -Force -ErrorAction SilentlyContinue
                    
                    # Try alternative download method
                    Write-NNLog "Trying alternative download..." "INFO"
                    try {
                        Invoke-WebRequest -Uri "https://www.malwarebytes.com/api/downloads/mb-windows" -OutFile $mbamInstaller -UseBasicParsing
                        $fileSize = (Get-Item $mbamInstaller).Length
                        Write-NNLog "Alternative download size: $([math]::Round($fileSize/1MB, 2)) MB" "INFO"
                    } catch {
                        Write-NNLog "Alternative download failed: $_" "ERROR"
                    }
                }
            }
            
            if (Test-Path $mbamInstaller -and (Get-Item $mbamInstaller).Length -gt 1MB) {
                Write-NNLog "Installing Malwarebytes..." "INFO"
                
                $arguments = @(
                    "/VERYSILENT",
                    "/SUPPRESSMSGBOXES", 
                    "/NORESTART",
                    "/SP-"
                )
                
                Write-NNLog "Install command: $mbamInstaller $($arguments -join ' ')" "INFO"
                
                $process = Start-Process -FilePath $mbamInstaller -ArgumentList $arguments -Wait -PassThru -NoNewWindow
                Write-NNLog "Installation exit code: $($process.ExitCode)" "INFO"
                
                # Wait for installation to complete
                Start-Sleep -Seconds 10
                
                # Check if installation was successful
                $mbamInstalled = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" -ErrorAction SilentlyContinue | 
                    Where-Object { $_.DisplayName -like "*Malwarebytes*" }
                
                if ($mbamInstalled) {
                    Write-NNLog "Installation successful: $($mbamInstalled.DisplayName)" "SUCCESS"
                } else {
                    Write-NNLog "Installation may have failed - checking alternative locations..." "WARNING"
                    
                    # Check if executables exist
                    $mbamPaths = @(
                        "${env:ProgramFiles}\Malwarebytes\Anti-Malware\mbam.exe",
                        "${env:ProgramFiles(x86)}\Malwarebytes\Anti-Malware\mbam.exe",
                        "${env:ProgramFiles}\Malwarebytes\mbam.exe"
                    )
                    
                    foreach ($path in $mbamPaths) {
                        if (Test-Path $path) {
                            Write-NNLog "Found Malwarebytes executable: $path" "SUCCESS"
                            break
                        }
                    }
                }
            } else {
                Write-NNLog "Download failed or file is invalid" "ERROR"
            }
        } else {
            Write-NNLog "Download failed - file not created" "ERROR"
        }
    } catch {
        Write-NNLog "Download error: $_" "ERROR"
    } finally {
        if (Test-Path $mbamInstaller) {
            Remove-Item $mbamInstaller -Force -ErrorAction SilentlyContinue
        }
    }
}

# Check for Malwarebytes executables
Write-NNLog "Checking for Malwarebytes executables..." "INFO"

$mbamPaths = @(
    "${env:ProgramFiles}\Malwarebytes\Anti-Malware\mbam.exe",
    "${env:ProgramFiles(x86)}\Malwarebytes\Anti-Malware\mbam.exe",
    "${env:ProgramFiles}\Malwarebytes\mbam.exe"
)

$mbamCmdPaths = @(
    "${env:ProgramFiles}\Malwarebytes\Anti-Malware\mbamcmd.exe",
    "${env:ProgramFiles(x86)}\Malwarebytes\Anti-Malware\mbamcmd.exe"
)

$foundGUI = $null
$foundCMD = $null

foreach ($path in $mbamPaths) {
    if (Test-Path $path) {
        $foundGUI = $path
        Write-NNLog "Found GUI: $path" "SUCCESS"
        break
    }
}

foreach ($path in $mbamCmdPaths) {
    if (Test-Path $path) {
        $foundCMD = $path
        Write-NNLog "Found CMD: $path" "SUCCESS"
        break
    }
}

if (-not $foundGUI -and -not $foundCMD) {
    Write-NNLog "No Malwarebytes executables found" "ERROR"
    Write-NNLog "Available executables in Program Files:" "INFO"
    
    try {
        Get-ChildItem "${env:ProgramFiles}\*malware*" -Recurse -Include "*.exe" -ErrorAction SilentlyContinue | 
            ForEach-Object { Write-NNLog "  Found: $($_.FullName)" "INFO" }
        
        Get-ChildItem "${env:ProgramFiles(x86)}\*malware*" -Recurse -Include "*.exe" -ErrorAction SilentlyContinue | 
            ForEach-Object { Write-NNLog "  Found: $($_.FullName)" "INFO" }
    } catch {
        Write-NNLog "Error searching for executables: $_" "WARNING"
    }
    
    Write-NNLog "Manual installation may be required" "WARNING"
} else {
    Write-NNLog "Malwarebytes executables are available for scanning" "SUCCESS"
    
    if ($foundCMD) {
        Write-NNLog "Would attempt command-line scan with: $foundCMD" "INFO"
    } elseif ($foundGUI) {
        Write-NNLog "Would attempt GUI-based scan with: $foundGUI" "INFO"
    }
}

Write-NNLog "=== MALWAREBYTES DEBUG MODULE COMPLETED ===" "INFO"