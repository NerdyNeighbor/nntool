# Malwarebytes Module - Proper Installation Methods
# Uses package managers and official methods instead of guessing URLs

param(
    [string]$LogFunction = "Write-Host"
)

function Write-NNLog {
    param([string]$Message, [string]$Level = "INFO")
    
    if ($LogFunction -eq "Write-Log" -and (Get-Command Write-Log -ErrorAction SilentlyContinue)) {
        & Write-Log $Message $Level
    } else {
        $color = switch ($Level) {
            "ERROR" { "Red" }
            "WARNING" { "Yellow" }
            "SUCCESS" { "Green" }
            default { "White" }
        }
        Write-Host "[$Level] $Message" -ForegroundColor $color
    }
}

function Install-Malwarebytes {
    Write-NNLog "Installing Malwarebytes using proper methods..." "INFO"
    
    # Method 1: Try Chocolatey (if available)
    Write-NNLog "Checking for Chocolatey package manager..." "INFO"
    $chocoInstalled = Get-Command choco -ErrorAction SilentlyContinue
    
    if ($chocoInstalled) {
        Write-NNLog "Chocolatey found, attempting installation..." "INFO"
        try {
            & choco install malwarebytes -y --ignore-checksums
            if ($LASTEXITCODE -eq 0) {
                Write-NNLog "Malwarebytes installed successfully via Chocolatey" "SUCCESS"
                return $true
            } else {
                Write-NNLog "Chocolatey installation failed with exit code: $LASTEXITCODE" "WARNING"
            }
        } catch {
            Write-NNLog "Chocolatey installation error: $_" "WARNING"
        }
    } else {
        Write-NNLog "Chocolatey not available" "INFO"
    }
    
    # Method 2: Try WinGet (Windows Package Manager)
    Write-NNLog "Checking for WinGet package manager..." "INFO"
    $wingetInstalled = Get-Command winget -ErrorAction SilentlyContinue
    
    if ($wingetInstalled) {
        Write-NNLog "WinGet found, searching for Malwarebytes..." "INFO"
        try {
            # Search for Malwarebytes package
            $wingetList = & winget search malwarebytes 2>&1
            if ($wingetList -like "*Malwarebytes*") {
                Write-NNLog "Malwarebytes found in WinGet, installing..." "INFO"
                & winget install --id Malwarebytes.Malwarebytes --silent --accept-package-agreements --accept-source-agreements
                if ($LASTEXITCODE -eq 0) {
                    Write-NNLog "Malwarebytes installed successfully via WinGet" "SUCCESS"
                    return $true
                } else {
                    Write-NNLog "WinGet installation failed with exit code: $LASTEXITCODE" "WARNING"
                }
            } else {
                Write-NNLog "Malwarebytes not found in WinGet repository" "WARNING"
            }
        } catch {
            Write-NNLog "WinGet installation error: $_" "WARNING"
        }
    } else {
        Write-NNLog "WinGet not available" "INFO"
    }
    
    # Method 3: Install Chocolatey first, then use it
    Write-NNLog "Installing Chocolatey package manager first..." "INFO"
    try {
        # Install Chocolatey using the official method
        $installScript = Invoke-WebRequest -Uri "https://chocolatey.org/install.ps1" -UseBasicParsing
        Invoke-Expression $installScript.Content
        
        # Refresh environment to make choco available
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
        # Try installing Malwarebytes with newly installed Chocolatey
        Start-Sleep -Seconds 5
        & choco install malwarebytes -y --ignore-checksums
        if ($LASTEXITCODE -eq 0) {
            Write-NNLog "Malwarebytes installed successfully via newly installed Chocolatey" "SUCCESS"
            return $true
        }
    } catch {
        Write-NNLog "Failed to install Chocolatey: $_" "WARNING"
    }
    
    # Method 4: Direct download with proper silent install parameters
    Write-NNLog "Attempting direct download with proper install parameters..." "INFO"
    
    $mbamInstaller = Join-Path $env:TEMP "MBSetup.exe"
    
    # Use the official Malwarebytes free download page URL
    $downloadUrl = "https://www.malwarebytes.com/mwb-download/thankyou/"
    
    try {
        Write-NNLog "Downloading from official Malwarebytes site..." "INFO"
        
        # Create a web session to handle redirects properly
        $session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
        $session.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        
        # Follow the download process
        $downloadPage = Invoke-WebRequest -Uri $downloadUrl -WebSession $session -UseBasicParsing
        
        # Look for actual download link in the page
        $downloadLinks = $downloadPage.Links | Where-Object { $_.href -like "*MBSetup*" -or $_.href -like "*mb-setup*" }
        
        if ($downloadLinks) {
            $actualDownloadUrl = $downloadLinks[0].href
            if ($actualDownloadUrl -notlike "http*") {
                $actualDownloadUrl = "https://www.malwarebytes.com" + $actualDownloadUrl
            }
            
            Write-NNLog "Found download link: $actualDownloadUrl" "INFO"
            
            # Download the installer
            Invoke-WebRequest -Uri $actualDownloadUrl -OutFile $mbamInstaller -WebSession $session -UseBasicParsing
            
            if (Test-Path $mbamInstaller) {
                $fileSize = (Get-Item $mbamInstaller).Length
                Write-NNLog "Download completed: $([math]::Round($fileSize/1MB, 2)) MB" "SUCCESS"
                
                if ($fileSize -gt 1MB) {
                    # Install with proper silent parameters
                    Write-NNLog "Installing Malwarebytes with silent parameters..." "INFO"
                    
                    $installArgs = @(
                        "/VERYSILENT",
                        "/SUPPRESSMSGBOXES",
                        "/NORESTART",
                        "/SP-"
                    )
                    
                    $process = Start-Process -FilePath $mbamInstaller -ArgumentList $installArgs -Wait -PassThru -NoNewWindow
                    
                    if ($process.ExitCode -eq 0) {
                        Write-NNLog "Malwarebytes installed successfully via direct download" "SUCCESS"
                        return $true
                    } else {
                        Write-NNLog "Installation failed with exit code: $($process.ExitCode)" "ERROR"
                    }
                } else {
                    Write-NNLog "Downloaded file too small, likely an error page" "ERROR"
                }
            }
        } else {
            Write-NNLog "Could not find download link on Malwarebytes page" "ERROR"
        }
    } catch {
        Write-NNLog "Direct download failed: $_" "ERROR"
    } finally {
        # Clean up installer
        if (Test-Path $mbamInstaller) {
            Remove-Item $mbamInstaller -Force -ErrorAction SilentlyContinue
        }
    }
    
    Write-NNLog "All installation methods failed" "ERROR"
    return $false
}

function Test-MalwarebytesFunctional {
    # Check for working executable in common paths
    $mbamPaths = @(
        "${env:ProgramFiles}\Malwarebytes\Anti-Malware\mbam.exe",
        "${env:ProgramFiles(x86)}\Malwarebytes\Anti-Malware\mbam.exe",
        "${env:ProgramFiles}\Malwarebytes\mbam.exe",
        "${env:ProgramFiles(x86)}\Malwarebytes\mbam.exe",
        "${env:ProgramData}\chocolatey\lib\malwarebytes\tools\mbam.exe"
    )
    
    foreach ($path in $mbamPaths) {
        if (Test-Path $path) {
            Write-NNLog "Found working executable: $path" "SUCCESS"
            return $path
        }
    }
    
    # Check via service path
    try {
        $service = Get-WmiObject Win32_Service -Filter "Name='MBAMService'" -ErrorAction SilentlyContinue
        if ($service -and $service.PathName) {
            $servicePath = $service.PathName -replace '"', ''
            if (Test-Path $servicePath) {
                $serviceDir = Split-Path $servicePath -Parent
                $guiPath = Join-Path $serviceDir "mbam.exe"
                if (Test-Path $guiPath) {
                    Write-NNLog "Found working executable via service: $guiPath" "SUCCESS"
                    return $guiPath
                }
            }
        }
    } catch {}
    
    return $null
}

function Run-MalwarebytesScan {
    param([string]$MbamExecutable)
    
    Write-NNLog "Starting Malwarebytes scan..." "INFO"
    
    if (-not $MbamExecutable -or (-not (Test-Path $MbamExecutable))) {
        Write-NNLog "No valid Malwarebytes executable provided" "ERROR"
        return $false
    }
    
    Write-NNLog "Using executable: $MbamExecutable" "INFO"
    
    try {
        Write-NNLog "Launching Malwarebytes GUI..." "INFO"
        $process = Start-Process -FilePath $MbamExecutable -PassThru
        
        if ($process) {
            Write-NNLog "Malwarebytes started (PID: $($process.Id))" "SUCCESS"
            Write-NNLog "GUI launched - scan should start automatically" "INFO"
            Write-NNLog "Monitor the Malwarebytes window for scan progress" "INFO"
            
            # Give it time to start
            Start-Sleep -Seconds 10
            
            # Check if still running (user might close it)
            $stillRunning = Get-Process -Id $process.Id -ErrorAction SilentlyContinue
            if ($stillRunning) {
                Write-NNLog "Malwarebytes is running successfully" "SUCCESS"
                return $true
            } else {
                Write-NNLog "Malwarebytes closed quickly - check GUI manually" "WARNING"
                return $false
            }
        } else {
            Write-NNLog "Failed to start Malwarebytes process" "ERROR"
            return $false
        }
    } catch {
        Write-NNLog "Error launching Malwarebytes: $_" "ERROR"
        return $false
    }
}

# Main execution
Write-NNLog "Starting Malwarebytes automated process..." "INFO"

$functionalMbam = Test-MalwarebytesFunctional

if (-not $functionalMbam) {
    Write-NNLog "Malwarebytes not functionally installed" "WARNING"
    Write-NNLog "Installing using package managers..." "INFO"
    
    $installed = Install-Malwarebytes
    
    if (-not $installed) {
        Write-NNLog "Failed to install Malwarebytes via all methods" "ERROR"
        return
    }
    
    # Wait for installation to complete
    Start-Sleep -Seconds 10
    
    # Recheck after installation
    $functionalMbam = Test-MalwarebytesFunctional
    if (-not $functionalMbam) {
        Write-NNLog "Installation completed but executable still not found" "ERROR"
        return
    }
} else {
    Write-NNLog "Malwarebytes is functionally installed" "SUCCESS"
}

# Run the scan
$scanSuccess = Run-MalwarebytesScan -MbamExecutable $functionalMbam

if ($scanSuccess) {
    Write-NNLog "Malwarebytes launched successfully" "SUCCESS"
} else {
    Write-NNLog "Failed to launch Malwarebytes scan" "ERROR"
}

Write-NNLog "Malwarebytes process complete" "INFO"